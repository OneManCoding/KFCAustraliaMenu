name: Run main.py script for 669 670

on:
  workflow_dispatch:

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles asyncio aiohttp requests logging jq

    - name: Run the main.py script
      run: |
        python main.py 669 670

    - name: Pull latest changes
      id: git_pull
      run: |
        git pull origin main || echo "merge_conflict" > merge_error.txt
      continue-on-error: true

    - name: Handle merge conflict for metadata_menu_items.json
      if: steps.git_pull.outputs.merge_error == 'merge_conflict'
      run: |
        if [ -f metadata_menu_items.json ]; then
          # Create a backup of the local file
          cp metadata_menu_items.json metadata_menu_items_backup.json
        
          # Append entries from the remote file to the local file, only adding new unique entries
          jq -s '.[0] + .[1] | unique_by(.filename)' metadata_menu_items.json metadata_menu_items_backup.json > merged_metadata_menu_items.json
        
          # Replace the local file with the merged file
          mv merged_metadata_menu_items.json metadata_menu_items.json
        
          # Clean up the backup
          rm metadata_menu_items_backup.json
        
          git add metadata_menu_items.json
          git commit -m "Merged metadata_menu_items.json from remote"
          git push origin main
        fi

    - name: Wait for lock to be released
      run: |
        while [ -f .gitlock ]; do
          echo "Waiting for lock to be released..."
          git pull
          sleep $((RANDOM % 46 + 15))  # Sleep for a random time between 15 and 60 seconds
        done

    - name: Acquire lock
      run: |
        echo "Acquiring lock..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull
        echo "Locked by $GITHUB_RUN_ID" > .gitlock
        git add .gitlock
        git commit -m "Acquiring lock by run $GITHUB_RUN_ID"
        git push origin main

    - name: Commit and push changes
      if: success()  # Only run this step if the previous steps were successful
      run: |
        git pull
        git add .
        git commit -m "Updated store menu for 669 670 as of $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        git push origin main

    - name: Release lock
      run: |
        echo "Releasing lock..."
        git pull
        git rm .gitlock
        git commit -m "Releasing lock by run $GITHUB_RUN_ID"
        git push origin main

  periodic-check:
    runs-on: ubuntu-latest
    steps:
    - name: Periodically check and trigger the next workflow
      run: |
        while true; do
          # Check if the trigger lock exists
          if [ -f .triggerlock ]; then
            echo "Trigger lock exists. Exiting without triggering the next workflow."
            exit 0
          fi

          # Check the number of running workflows
          RUNNING_WORKFLOWS=$(curl -s -H "Authorization: token ${ secrets.GITHUB_TOKEN }" \
                                  "https://api.github.com/repos/${ github.repository }/actions/runs?status=in_progress" \
                                  | jq '.workflow_runs | length')
          echo "Number of running workflows: $RUNNING_WORKFLOWS"

          if [ $RUNNING_WORKFLOWS -lt 3 ]; then
            # Create a trigger lock file to prevent double triggering
            echo "Triggering next workflow..."
            touch .triggerlock
            git add .triggerlock
            git commit -m "Created trigger lock for workflow workflow_671_to_672"
            git push origin main

            # Trigger the next workflow
            curl -X POST \
            -H "Authorization: token ${ secrets.GITHUB_TOKEN }" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${ github.repository }/actions/workflows/workflow_671_to_672.yml/dispatches \
            -d '{"ref":"main"}'

            # Exit the loop after successfully triggering the next workflow
            break
          else
            echo "Waiting for available workflow slots..."
            sleep 60  # Check every 60 seconds
          fi
        done

    - name: Remove trigger lock
      run: |
        git pull
        git rm .triggerlock
        git commit -m "Removed trigger lock"
        git push origin main
