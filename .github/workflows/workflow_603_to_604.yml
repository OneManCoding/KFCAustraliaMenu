name: Run main.py script for 603 604

on:
  workflow_dispatch:

jobs:
  run-script:
    runs-on: ubuntu-latest-m

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install aiofiles asyncio aiohttp requests logging jq
        sleep $((RANDOM % 46 + 15))  # Sleep for a random time between 15 and 60 seconds

    - name: Run the main.py script
      run: |
        python main.py 603 604
        sleep $((RANDOM % 46 + 15))  # Sleep for a random time between 15 and 60 seconds

    - name: Try to pull latest changes and stash
      id: git_pull
      continue-on-error: true
      run: |
        git stash || true
        git pull origin main || echo "merge_conflict" > $GITHUB_WORKSPACE/merge_error.txt
        git stash pop || true
        sleep $((RANDOM % 46 + 15))  # Sleep for a random time between 15 and 60 seconds

    - name: Handle merge conflicts
      run: |
        echo "Checking for unmerged files..."
        UNMERGED_FILES=$(git diff --name-only --diff-filter=U)
        if [ -n "$UNMERGED_FILES" ]; then
          echo "Found unmerged files: $UNMERGED_FILES"
          for file in $UNMERGED_FILES; do
            echo "Merging changes in $file..."
            python resolve_conflict.py $file
          done
          git add $UNMERGED_FILES
          git commit -m "Merged local changes with remote for files: $UNMERGED_FILES"
          git push origin main
        else
          echo "No unmerged files found."
        fi

    - name: Wait for lock to be released
      run: |
        while [ -f .gitlock ]; do
          echo "Waiting for lock to be released..."
          git pull
          sleep $((RANDOM % 46 + 15))  # Sleep for a random time between 15 and 60 seconds
        done

    - name: Acquire lock
      run: |
        echo "Acquiring lock..."
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull
        echo "Locked by $GITHUB_RUN_ID" > .gitlock
        git add .gitlock
        git commit -m "Acquiring lock by run $GITHUB_RUN_ID"
        git push origin main

    - name: Commit and push changes
      if: success()  # Only run this step if the previous steps were successful
      run: |
        git pull
        git add .
        git commit -m "Updated store menu for 603 604 as of $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
        git push origin main

    - name: Release lock
      run: |
        echo "Releasing lock..."
        git pull
        git rm .gitlock
        git commit -m "Releasing lock by run $GITHUB_RUN_ID"
        git push origin main

  periodic-check:
    runs-on: ubuntu-latest
    steps:
    - name: Periodically check and trigger the next workflow
      run: |
        while true; do
          # Check the number of running workflows
          RUNNING_WORKFLOWS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                                  "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=in_progress" \
                                  | jq '.workflow_runs | length')
          echo "Number of running workflows: $RUNNING_WORKFLOWS"

          if [ "$RUNNING_WORKFLOWS" -lt 10 ]; then
            # Trigger the next workflow
            echo "Triggering next workflow..."
            curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/workflow_605_to_606.yml/dispatches \
            -d '{"ref":"main"}'
            break
          else
            echo "Waiting for available workflow slots..."
            sleep 60  # Check every 60 seconds
          fi
        done
